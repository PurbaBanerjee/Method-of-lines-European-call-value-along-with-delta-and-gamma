import numpy as np
import scipy.stats as si
import time
import math
from scipy.linalg import expm
from numpy.linalg import inv
from matplotlib import pyplot as plt
%matplotlib inline
cx=110
d=1.2
n=100
t=0
g=[]
g1=[]
g2=[]
y=[]
t1=time.time()
while n<2000:
    dx=1/n
    n1=n+1
    n2=n-1
    sigma=0.3
    r=0.03
    T=1
    K=100
    x=np.zeros(n1+1)
    h=np.zeros(n1+2)
    x[1:n1]=dx
    x = np.cumsum(x)
    x[n1]=1.1
    xx=np.zeros(n1+1)
    xx=(cx*x)/(d-x)
    indexFor100 = max(np.where(xx <=100 )[0])
    print(indexFor100, xx[indexFor100])
    xx[indexFor100+1] = 100
    fl=xx[n1]
    for i in range(1,n1+1):
        h[i]=xx[i]-xx[i-1]
    A=np.zeros((n,n))
    B=np.zeros((n,n))
    C=np.zeros((n,n))
    A1=np.zeros((n,n))
    B1=np.zeros((n,n))
    A2=np.zeros((n,n))
    B2=np.zeros((n,n))
    U0=np.zeros(n)
    V2=np.zeros(n)
    V1=np.zeros(n)
    frhs=np.zeros(n)
    frhs2=np.zeros(n)
    frhs1=np.zeros(n)
    frhs3=np.zeros(n)
    frhs4=np.zeros(n)
    for i in range(n):
        A[i][i]=-(sigma*sigma*xx[i+1]*xx[i+1])/(h[i+1]*h[i+2])
        C[i][i]=-r
    for i in range(n-1):
        A[i][i+1]=(sigma*sigma*xx[i+1]*xx[i+1])/((h[i+1]+h[i+2])*h[i+2])
        B[i][i+1]=(r*xx[i+1])/(h[i+1]+h[i+2])
    for i in range(1,n):
        A[i][i-1]=(sigma*sigma*xx[i+1]*xx[i+1])/((h[i+1]+h[i+2])*h[i+1])
        B[i][i-1]=-(r*xx[i+1])/(h[i+1]+h[i+2])
    for i in range(n):
        U0[i]=(max(xx[i+1]-K,0))
    fhs=((sigma*sigma*xx[n]*xx[n])/((h[n]+h[n+1])*h[n])) +((r*xx[n])/(h[n]+h[n+1]))
    frhs[n-1]=fhs*(max(fl-K,0))
    U=np.array([U0]).T
    F=np.array([frhs]).T
    AA=A+B+C
    E0=np.dot(expm((T-t)*AA),U)
    G1=np.dot(inv(AA),(expm((T-t)*AA))-np.identity(n))
    E=E0+np.dot(G1,F)
    m=indexFor100
    t2=time.time()
    print("Index for xx = 100", m, np.where(xx==100))
    print("The number of grid points is:",n)
    print("The value at time t for xx=100 is:",xx[m], E[m])
    abse=abs(E[m]-13.28330840)
    print("The absolute error is:",abse)
    error=np.log(abs(E[m]-13.28330840))
    print("The error is:", error)
    print("The time-elapsed is:",t2-t1)
    for i in range(n-1):
        B2[i][i+1]=1/(h[i+1]+h[i+2])
    for i in range(1,n):
        B2[i][i-1]=-1/(h[i+1]+h[i+2])
    frhs3[n-1]=(1/(h[n]+h[n+1]))*E[n-1]
    F3=np.array([frhs3]).T
    E2=np.dot(B2,E)+F3
    t3=time.time()
    print("The delta at xx=100 is:",E2[m])
    error2=abs(E2[m]-0.59870632)
    print("The absolute error in delta is:", error2)
    print("The log error is:",np.log(error2))
    print("The time-elapsed is:",t3-t1)
    for i in range(n):
        A1[i][i]=-2/(h[i+1]*h[i+2])
    for i in range(n-1):
        A1[i][i+1]=2/((h[i+1]+h[i+2])*h[i+2])
    for i in range(1,n):
        A1[i][i-1]=2/((h[i+1]+h[i+2])*h[i+1])
    frhs4[n-2]=(1/(h[n-1]+h[n]))*(1/(h[n]+h[n+1]))*E[n-1]
    F4=np.array([frhs4]).T+np.array([frhs3]).T
    E3=np.dot(A1,E)+F4
    t4=time.time()
    print("The gamma at xx=100 is:",E3[m])
    error3=abs(E3[m]-0.01288894)
    print("The absolute error in gamma is:", error3)
    print("The log error is:",np.log(error3) )
    print("The value of n is",n)
    print("The time elapsed is", t4-t1)
    g.append(error)
    g1.append(np.log(error2))
    g2.append(np.log(error3))
    y.append(n)
    n=2*n

fig, ax = plt.subplots()
ax.plot(y,g, label='European call')
ax.plot(y,g1, label='European call delta error')
ax.plot(y,g2, label='European call gamma error')
