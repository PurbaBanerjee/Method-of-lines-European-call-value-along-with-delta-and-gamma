import numpy as np
import scipy.stats as si
import sympy as sy
import math
from scipy.linalg import expm
from numpy.linalg import inv
from matplotlib import pyplot as plt
%matplotlib inline
cx=80.0
d=1.2
n=60
g=[]
g1=[]
g2=[]
y=[]
while n<1921:
    dx=1/n
    n1=n+1
    n2=n-1
    sigma=0.3
    r=0.03
    T=1
    K=100
    x=np.zeros(n1+1)
    h=np.zeros(n1+2)
    for i in range(n1+1):
        if i==0:
            x[i]=0
        for i in range(1,n1):
            x[i]=x[i-1]+dx
        if i==n1:
            x[i]=1.1
    xx=np.zeros(n1+1)
    for i in range(0,n1+1):
        if i==0:
            xx[0]=0
        else:
            xx[i]=(cx*x[i])/(d-x[i])
    fl=xx[n1]
    for i in range(1,n1+1):
        h[i]=xx[i]-xx[i-1]
    A=np.zeros((n,n))
    B=np.zeros((n,n))
    C=np.zeros((n,n))
    A1=np.zeros((n,n))
    B1=np.zeros((n,n))
    A2=np.zeros((n,n))
    B2=np.zeros((n,n))
    B3=np.zeros((n,n))
    C3=np.zeros((n,n))
    U0=np.zeros(n)
    V2=np.zeros(n)
    V1=np.zeros(n)
    frhs=np.zeros(n)
    frhs2=np.zeros(n)
    frhs1=np.zeros(n)
    fhss1=np.zeros(n)
    for i in range(n):
        A[i][i]=-(sigma*sigma*xx[i+1]*xx[i+1])/(h[i+1]*h[i+2])
        C[i][i]=-r
    for i in range(n-1):
        A[i][i+1]=(sigma*sigma*xx[i+1]*xx[i+1])/((h[i+1]+h[i+2])*h[i+2])
        B[i][i+1]=(r*xx[i+1])/(h[i+1]+h[i+2])
    for i in range(1,n):
        A[i][i-1]=(sigma*sigma*xx[i+1]*xx[i+1])/((h[i+1]+h[i+2])*h[i+1])
        B[i][i-1]=-(r*xx[i+1])/(h[i+1]+h[i+2])
    for i in range(n):
        U0[i]=(max(xx[i+1]-K,0))
    fhs=((sigma*sigma*xx[n]*xx[n])/((h[n]+h[n+1])*h[n])) +((r*xx[n])/(h[n]+h[n+1]))
    frhs[n-1]=fhs*(max(fl-K,0))
    U=np.array([U0]).T
    F=np.array([frhs]).T
    AA=A+B+C
    E0=np.dot(expm(T*AA),U)
    G1=np.dot(inv(AA),(expm(T*AA))-np.identity(n))
    E=E0+np.dot(G1,F)
    for i in range(n):
        C3[i][i]=-1
    for i in range(n-1):
        B3[i][i+1]=(xx[i+1])/(h[i+1]+h[i+2])
    for i in range(1,n):
         B3[i][i-1]=-(xx[i+1])/(h[i+1]+h[i+2])
    fhss=((xx[n])/(h[n]+h[n+1]))
    fhss1[n-1]=fhss*(max(fl-K,0))
    
    Q=np.array([fhss1]).T
    AA3=A+B3+C3
    Q1=np.dot(expm(T*AA3),U)
    G1=np.dot(inv(AA),(expm(T*AA))-np.identity(n))
    E=E0+np.dot(G1,F)
    Q2=np.dot(expm(T*AA)-np.identity(n),F)
    Q3=np.dot(expm(T*AA)-np.identity(n),Q)
    Q4=np.dot(B3+C3,inv(AA))
    Q5=np.dot(B3+C3,U)
    Q6=np.dot(Q4,Q2)
    Q7=np.dot(B3+C3,F)
    Q8=np.dot(inv(AA),expm(T*AA))
    Q9=np.dot(Q8,Q7)
    Urho=T*np.dot(expm(T*AA),Q5)-np.dot(inv(AA),Q6)+T*Q9+np.dot(inv(AA),Q3)
    m=int((2/3)*n-1)
    print("The number of grid points is:",n)
    error=np.log(abs(E[m]-13.283))
    print("The rho at xx=100 is:", Urho[m])
    errorv=np.log(abs(Urho[m]-46.58732417))
    print("The error in rho is:", errorv)
    for i in range(n-1):
        B2[i][i+1]=1/(h[i+1]+h[i+2])
    for i in range(1,n):
        B2[i][i-1]=-1/(h[i+1]+h[i+2])
    E2=np.dot(B2,E)
    error2=np.log(abs(E2[m]-0.599))
    for i in range(n):
        A1[i][i]=-2/(h[i+1]*h[i+2])
    for i in range(n-1):
        A1[i][i+1]=2/((h[i+1]+h[i+2])*h[i+2])
    for i in range(1,n):
        A1[i][i-1]=2/((h[i+1]+h[i+2])*h[i+1])
    E3=np.dot(A1,E)
    error3=np.log(abs(E3[m]-0.013))
    g.append(error)
    g1.append(error2)
    g2.append(error3)
    y.append(n)
    n=2*n
fig, ax = plt.subplots()
ax.plot(y,g, label='European call')
ax.plot(y,g1, label='European call delta error')
ax.plot(y,g2, label='European call gamma error')
